#!/usr/bin/env bash

# drun - Set of commands to run against Django projects within Docker
#           containers. Make sure the the alias `alias drun='./drun' is 
#           included in your .bashrc

set -o errexit
set -o pipefail

DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _dc {
  docker compose "${DC}" ${TTY} "${@}"
}

function _build_run_down {
  docker compose build
  docker compose run ${TTY} "${@}"
  docker compose down
}

# -----------------------------------------------------------------------------

function build:dev {
  # Build & run container with dev/testing dependencies
  docker compose build --build-arg "ENV=DEV" && docker compose up
}

function build:prod {
  # Build & run container with no dev/testing dependencies
  docker compose build --build-arg "ENV=PROD" && docker compose up
}

function cmd {
  # Run any command you want in the web container
  _dc web "${@}"
}

function cov:test {
  # Run pytest
  cmd coverage run -m pytest "${@}"
}

function cov:test-slow {
  # Run pytest & show 10 slowest tests
  cmd coverage run -m pytest "${@}" --durations 10
}

function cov:report {
  # Generate coverage report to terminal
  cmd coverage report "${@}"
}

function cov:html {
  # Output coverage report to ./htmlcov
  cmd coverage html "${@}"
}

function down {
  # Shut down container
  docker compose down
}

function manage {
  # Run any manage.py commands

  # We need to collectstatic before we run our tests.
  if [ "${1-''}" == "test" ]; then
    cmd python3 manage.py collectstatic --no-input
  fi

  cmd python3 manage.py "${@}"
}

function migrate {
  docker compose exec web python manage.py migrate
}

function nox:cov {
  # Check code for formatting violations
  cmd nox -s coverage-3.13 "${@}"
}

function nox:docs {
  # Create Sphinx documentation in ./docs/_build directory
  cmd nox -s docs-3.13 "${@}"
}

function nox:lint {
  # Run a number of ruff linting tests
  cmd nox -s lint-3.13 "${@}"
}

function nox:pyright {
  # Run pyright typing checks
  cmd nox -s pyright-3.13 "${@}"
}

function nox:safety {
  # Check code/packages for vulnerabilites against Safety db
  cmd nox -s safety-3.13 "${@}"
}

function nox:test {
  # Run several pytest and coverage checks
  cmd nox -s tests-3.13 "${@}"
}

function nox:all {
  # Perform all nox code quality tests together
  cmd nox -s lint-3.13 coverage-3.13 safety-3.13 tests-3.13 "${@}"
}

function nox:re-all {
  # Perform all nox code quality tests together
  cmd nox -rs lint-3.13 coverage-3.13 safety-3.13 tests-3.13 "${@}"
}

function poe:old {
  # List any installed packages that are outdated
  # The following command runs twice as fast; but, requires the container
  # to be running:
  cmd poetry show -ol
}

function poe:up {
  # Update any outdated packages
  poetry update
}

function reqs:dev {
  # Export all package requirements
  # poetry export -f requirements.txt --with=dev --without-hashes -o requirements-dev.txt
  poetry export --with=dev --output requirements-dev.txt
}

function reqs:prod {
  # Export production package requirements
  # poetry export -f requirements.txt --without-hashes -o requirements.txt
  poetry export --output requirements.txt
}

function reqs:all {
  # Export production package requirements
  # poetry export -f requirements.txt --with=dev --without-hashes -o requirements-dev.txt
  # poetry export -f requirements.txt --without-hashes -o requirements.txt
  poetry export --output requirements.txt
  poetry export --with=dev --output requirements-dev.txt
}

function ruff:check {
  # check for linting errors. Do not fix.
  ruff check .
}

function ruff:fix {
  # check for linting errors and apply fixes.
  ruff check --fix .
}

function secret {
  # Generate a random secret that can be used for your SECRET_KEY and more
  # cmd python3 -c 'import secrets; print(secrets.token_urlsafe(38))'
  python3 -c 'import secrets; print(secrets.token_urlsafe(38))'
}

function sh {
  # Start a shell session in the web container
  # cmd bash "${@}"
  python manage.py shell
}

function sh+ {
  # Start a shell_plus IPython session in the web container
  # auto-import all models, and the datetime module
  # cmd python manage.py shell_plus "${@}"
  python manage.py shell_plus
}

function start {
  # Start development web server
  # cmd bash "${@}"
  python manage.py runserver
}

function start+ {
  # Start development web server with HTTPS
  # cmd bash "${@}"
  python manage.py runserver_plus --cert-file cert.crt
}

function up {
  # Start docker container
  docker compose up
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
