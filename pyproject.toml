[tool.poetry]
name = "learning-log"
version = "0.2.0"
description = "A Django web application for creating learning lists"
authors = [
    "Kevin Bowen <kevin.bowen@gmail.com>",
]
maintainers = [
]
license = "MIT"

readme = "README.md"

homepage = ""
repository = "https://github.com/kevinbowen777/learning-log.git"
documentation = "file: README.rst"

keywords = ["diary", "django", "web-application", "learning-log"]

classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
]

[tool.poetry.dependencies]
python = "^3.10"
Django = "4.2.6"

django-crispy-forms = "^2.0"
django-allauth = ">=0.54.0, < 0.60.0"
environs = { version = "^9.5.0", extras = ["django"] }
django-extensions = "^3.1.5"
dj-database-url = "^2.0.0"
django-heroku = "0.3.1"
soupsieve = "^2.3.1"
sqlparse = "^0.4.2"
whitenoise = "^6.0.0"
psycopg2-binary = "^2.9.5"
django-countries = "^7.3.2"
beautifulsoup4 = "^4.10.0"
Pillow = "^10.0"
gunicorn = "^21.0"
crispy-bootstrap4 = "^2023.1"
django-types = "^0.19.0"

[tool.poetry.group.dev.dependencies]
django-debug-toolbar = "^4.0.0"
pre-commit = "^3.0.0"
black = "^23.0.0"
pytest = "^7.2.0"
pytest-sugar = "^0.9.4"
ipython = "^8.4.0"
friendly = "^0.7.0"
colorama = "^0.4.4"
django-coverage-plugin = "^3.0.0"
nox = "2023.4.22"
safety = "2.4.0b1"
factory-boy = "^3.2.0"
coverage = { version = "^7.0.0", extras = ["toml"] }
pytest-cov = "^4.0.0"
pytest-django = "^4.5.2"
ruff = ">= 0.0.275, < 0.0.299"
werkzeug = "^3.0"
pyopenssl = "^23.2.0"
djlint = "^1.31.1"
sphinx = ">= 7.2.5, < 7.3.0"
furo = "^2023.7.26"

[tool.black]
line-length = 88
# include =
exclude = '''
/(
    \.git
  | __pycache__
  | .pytest_cache
  | .venv
  | staticfiles
  | build
  | dist
  | ^.*\b(migrations)\b.*$
)/
'''

[tool.coverage.run]
branch = true
source = ["accounts", "config", "learning_logs", "pages"]
omit = [
    "conftest.py",
    "manage.py",
    "settings.py",
    "*test.py",
    "asgi.py",
    "gunicorn.py",
    "wsgi.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/factories.py",
    "*/tests/*",
]
plugins = [
    "django_coverage_plugin",
]

[tool.coverage.django_coverage_plugin]
template_extensions = "html, txt, tex, email"

[tool.coverage.report]
show_missing = true

[tool.djlint]
exclude="htmlcov"
files=["templates/"]
indent=2
preserve_blank_lines=true

[tool.pyright]
include = ["config", "accounts", "pages", "learning_logs",]
exclude = ["**/tests",
    "**/__pycache__",
    "**/migrations",
]
ignore = ["docs/_build"]
defineConstant = { DEBUG = true }
stubPath = ""
venv = "learning-log-3s6_931d-py3.12"
venvPath = "../../../venvs"

typeCheckingMode = "basic"
useLibraryCodeForTypes = true
strictListInference = true
strictDictionaryInference = true
reportConstantRedefinition = "error"
reportOptionalCall = "error"
reportOptionalContextManager = "error"
reportOptionalIterable = "error"
reportOptionalMemberAccess = "error"
reportMissingImports = true
reportOptionalOperand = "error"
reportOptionalSubscript = "error"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "error"
reportUnnecessaryTypeIgnoreComment = "warning"

pythonVersion = "3.12"
pythonPlatform = "Linux"

executionEnvironments = [
  { root = ".", pythonVersion = "3.12", extraPaths = [ "accounts", "config", "pages", "learning_logs" ] },
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.test"
# After changes to the db model, run the tests without --reuse-db flag
# Otherwise, tests will generate an error:...exceptions.ImproperlyConfigured...
# addopts = "-p no:warnings"
addopts = "--reuse-db -p no:warnings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango50Warning",
    "ignore::django.utils.deprecation.RemovedInDjango51Warning",
]

[tool.ruff]
select = [
    "B",    # flake8-bugbear
    "C90",  # mccabe
    "DJ",   # flake8-django
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "S",    # flake8-bandit
    "W",    # pycodestyle warnings
    # "RUF",  # ruff checks
]
ignore = [
    "E501",    # line too long ({width} > {limit} characters)
    # "E203",  # slice notation whitespace (not currently supported)
    "E402",    # module level import not at top of file
    "E722",    # do not use bare except
    # "W503",  # (not currently supported)
    "ERA",     # do not autoremove commented out code
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".mypy_cache",
    ".nox",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "__pypackages__",
    "htmlcov",
    "migrations",
    "_build",
    "build",
    "dist",
    "images",
    "media",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.12.
target-version = "py311"

[tool.ruff.per-file-ignores]
# "accounts/tests/factories.py" = ["BLK100"] (Not supported)
# "accounts/tests/*" = ["BLK100"] (Not supported)
"accounts/tests/*" = ["S101", "S106"]
"config/test.py" = ["S101", "S106"]
"pages/tests/*" = ["S101", "S106"]
"learning_logs/tests/*" = ["S101", "S106"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
