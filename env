# Path needed to run poetry in nox tests
export PATH="/root/.local/bin:$PATH"
# This should never be set to true in production but it should be enabled in dev.
# export DJANGO_DEBUG=false
export DJANGO_DEBUG=True

export EMAIL_HOST_PASSWORD=<email_host_password>

# django-allauth SOCIALACCOUNT_PROVIDER client credentials
GITHUB_SOCIALACCOUNT_APP_CLIENT_ID="<client_id_credential>"
GITHUB_SOCIALACCOUNT_APP_SECRET="<app_secret>"

# Enable BuildKit by default:
#   https://docs.docker.com/develop/develop-images/build_enhancements
export DOCKER_BUILDKIT=1

# In development we want all services to start but in production you don't
# need the asset watchers to run since assets get built into the image.
#
# You can even choose not to run postgres and redis in prod if you plan to use
# managed cloud services. Everything "just works", even optional depends_on!
#export COMPOSE_PROFILES=postgres,redis,web,worker
export COMPOSE_PROFILES=postgres,web

# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=learning-log

# How many workers and threads should your app use? WEB_CONCURRENCY defaults
# to the server's CPU count * 2. That is a good starting point. In development
# it's a good idea to use 1 to avoid race conditions when debugging.
#export WEB_CONCURRENCY=
export WEB_CONCURRENCY=1
#export PYTHON_MAX_THREADS=1

# python -c 'import secrets; print(secrets.token_urlsafe(38))'
export SECRET_KEY=<secret_key>
# Uncomment the following three lines to run a sqlite3 db locally.
# ENGINE_DB=django.db.backends.sqlite3
# DATABASE_URL=sqlite:///learning-log.sqlite3
# export POSTGRES_DB=learning-log.sqlite3
DATABASE_URL=postgres://django_admin:<secret_key>@localhost:5432/learning-log
export POSTGRES_USER=django_admin
export POSTGRES_PASSWORD=<postgres_password>
export POSTGRES_DB=learning-log
# Use localhost for self-hosted PostgreSQL
# export POSTGRES_HOST=localhost
# Use 'db' for Docker containers
export POSTGRES_HOST=db
export POSTGRES_PORT=5432

# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
export DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
# export DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/healthcheck
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change 8000 to be something else.
#
# Use the default in production to avoid having gunicorn directly accessible to
# the internet without assistance from a cloud based firewall.
#export DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
export DOCKER_WEB_PORT_FORWARD=8000

# What volume path should be used? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
#export DOCKER_WEB_VOLUME=./public_collected:/code/public_collected
export DOCKER_WEB_VOLUME=.:/code

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#export DOCKER_POSTGRES_CPUS=0
#export DOCKER_POSTGRES_MEMORY=0
#export DOCKER_WEB_CPUS=0
#export DOCKER_WEB_MEMORY=0

# Used in production deployment
# SECURE_SSL_REDIRECT=False
# SECURE_HSTS_SECONDS=0
# SECURE_HSTS_INCLUDE_SUBDOMAINS=False
# SECURE_HSTS_PRELOAD=False
# SESSION_COOKIE_SECURE=False
# CSRF_COOKIE_SECURE=False
