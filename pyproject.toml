[tool.poetry]
name = "learning-log"
version = "0.3.1"
description = "A Django web application for creating learning lists"
authors = [
    "Kevin Bowen <kevin.bowen@gmail.com>",
]
maintainers = [
]
license = "MIT"

readme = "README.md"

homepage = "https://github.com/kevinbowen777/learning-log.git"
repository = "https://github.com/kevinbowen777/learning-log.git"
documentation = "file:///docs/index.rst"

keywords = [
    "diary",
    "django",
    "web-application",
    "learning-log",
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 5.1",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
]

package-mode = false

[tool.poetry.dependencies]
python = "^3.10"
Django = "5.1.3"

django-allauth = ">=65.0, <66.0.0"
environs = { version = "^11", extras = ["django"] }
django-extensions = "^3.2"
whitenoise = "^6.1.0"
psycopg = { version = "3.2.3", extras = ["binary"] } 
Pillow = ">=11.0, <12.0"
gunicorn = "^23.0"
crispy-bootstrap4 = "^2024.0"
django-crispy-forms = "^2.0"
django-countries = "^7.3.2"
dj-database-url = "^2.0.0"
soupsieve = "^2.3.1"
sqlparse = "^0.5"
beautifulsoup4 = "^4.10.0"

[tool.poetry.group.dev.dependencies]
django-debug-toolbar = "^4.0.0"
pre-commit = ">=4.0, <5.0"
ruff = ">=0.7, <0.8"
nox = "2024.10.09"
pytest = "^8.0"
pytest-cov = ">=6.0.0, <7.0"
pytest-django = "^4.5.2"
pytest-sugar = "^1.0"
coverage = { version = "^7.0.0", extras = ["toml"] }
django-coverage-plugin = "^3.0.0"
djlint = "^1.31.0"
sphinx = ">= 8.0, <9.0"
sphinx-lint = "1.0"
safety = "3.2.3"
factory-boy = "^3.2.0"
werkzeug = ">=3.1, <4.0"
pyopenssl = ">=24.0, <25.0"
furo = "^2024.0"
django-types = "^0.19.0"

[tool.coverage.run]
branch = true
dynamic_context = "test_function"
source = [
    "accounts",
    "config",
    "learning_logs",
    "pages",
]
omit = [
    "conftest.py",
    "manage.py",
    "settings.py",
    "asgi.py",
    "gunicorn.py",
    "wsgi.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/factories.py",
]
plugins = [
    "django_coverage_plugin",
]

[tool.coverage.django_coverage_plugin]
template_extensions = "html"

[tool.coverage.report]
show_missing = true
precision = 2

[tool.coverage.html]
show_contexts = true
title = "learning-log coverage report"

[tool.djlint]
exclude = ["htmlcov", "staticfiles"]
files = ["templates/"]
indent = 2
max_line_length = 120
preserve_blank_lines = true

[tool.pyright]
# See: https://github.com/microsoft/pyright/blob/main/docs/configuration.md
include = [
    "config",
    "accounts",
    "pages",
    "learning_logs",
]
exclude = [
    "**/tests",
    "**/__pycache__",
    "**/migrations",
]
ignore = ["docs/_build"]
defineConstant = { DEBUG = true }
stubPath = ""
# The following may need to be modified when collaborating with others
venv = "learning-log-3s6_931d-py3.13"
venvPath = "../../../venvs"
# More portable venv config
# venvPath = "."
# venv = ".venv"

typeCheckingMode = "basic"
useLibraryCodeForTypes = true
strictListInference = true
strictDictionaryInference = true
reportConstantRedefinition = "error"
reportOptionalCall = "error"
reportOptionalContextManager = "error"
reportOptionalIterable = "error"
reportOptionalMemberAccess = "error"
reportMissingImports = true
reportOptionalOperand = "error"
reportOptionalSubscript = "error"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "error"
reportUnnecessaryTypeIgnoreComment = "warning"

pythonVersion = "3.13"
pythonPlatform = "Linux"

executionEnvironments = [
  { root = ".", pythonVersion = "3.13", extraPaths = [ "accounts", "config", "pages", "learning_logs" ] },
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.test"
# After changes to the db model, run the tests without --reuse-db flag
# Otherwise, tests will generate an error:...exceptions.ImproperlyConfigured...
# addopts = "-p no:warnings"
addopts = "--reuse-db -p no:warnings"
python_files = ["test_*.py"]
filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango51Warning",
]

[tool.ruff]
preview = true
respect-gitignore = true
unsafe-fixes = false

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.13.x
target-version = "py313"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    # ".mypy_cache",
    # ".nox",
    # ".pytest_cache",
    # ".ruff_cache",
    # "__pycache__",
    # "__pypackages__",
    "htmlcov",
    "migrations",
    "images",
    "media",
]

[tool.ruff.lint]
select = [
    "B",    # flake8-bugbear
    "C90",  # mccabe
    "DJ",   # flake8-django
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "S",    # flake8-bandit
    "W",    # pycodestyle warnings
    # "RUF",  # ruff checks
]
ignore = [
    "E501",    # line too long ({width} > {limit} characters)
    # "E203",  # slice notation whitespace (not currently supported)
    "E402",    # module level import not at top of file
    "E722",    # do not use bare except
    # "W503",  # (not currently supported)
    "ERA",     # do not autoremove commented out code
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# "accounts/tests/factories.py" = ["BLK100"] (Not supported)
# "accounts/tests/*" = ["BLK100"] (Not supported)
"accounts/tests/*" = ["S101", "S106"]
"config/test.py" = ["S101", "S106"]
"pages/tests/*" = ["S101", "S106"]
"learning_logs/tests/*" = ["S101", "S106"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, repspect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
